// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: packet.proto

#ifndef PROTOBUF_INCLUDED_packet_2eproto
#define PROTOBUF_INCLUDED_packet_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_packet_2eproto 

namespace protobuf_packet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_packet_2eproto
namespace packet {
class PackPacket;
class PackPacketDefaultTypeInternal;
extern PackPacketDefaultTypeInternal _PackPacket_default_instance_;
}  // namespace packet
namespace google {
namespace protobuf {
template<> ::packet::PackPacket* Arena::CreateMaybeMessage<::packet::PackPacket>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace packet {

// ===================================================================

class PackPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:packet.PackPacket) */ {
 public:
  PackPacket();
  virtual ~PackPacket();

  PackPacket(const PackPacket& from);

  inline PackPacket& operator=(const PackPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PackPacket(PackPacket&& from) noexcept
    : PackPacket() {
    *this = ::std::move(from);
  }

  inline PackPacket& operator=(PackPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PackPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PackPacket* internal_default_instance() {
    return reinterpret_cast<const PackPacket*>(
               &_PackPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PackPacket* other);
  friend void swap(PackPacket& a, PackPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PackPacket* New() const final {
    return CreateMaybeMessage<PackPacket>(NULL);
  }

  PackPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PackPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PackPacket& from);
  void MergeFrom(const PackPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PackPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  const ::std::string& timestamp() const;
  void set_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(::std::string&& value);
  #endif
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  ::std::string* mutable_timestamp();
  ::std::string* release_timestamp();
  void set_allocated_timestamp(::std::string* timestamp);

  // string src_ip = 3;
  void clear_src_ip();
  static const int kSrcIpFieldNumber = 3;
  const ::std::string& src_ip() const;
  void set_src_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_src_ip(::std::string&& value);
  #endif
  void set_src_ip(const char* value);
  void set_src_ip(const char* value, size_t size);
  ::std::string* mutable_src_ip();
  ::std::string* release_src_ip();
  void set_allocated_src_ip(::std::string* src_ip);

  // string dest_ip = 4;
  void clear_dest_ip();
  static const int kDestIpFieldNumber = 4;
  const ::std::string& dest_ip() const;
  void set_dest_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_dest_ip(::std::string&& value);
  #endif
  void set_dest_ip(const char* value);
  void set_dest_ip(const char* value, size_t size);
  ::std::string* mutable_dest_ip();
  ::std::string* release_dest_ip();
  void set_allocated_dest_ip(::std::string* dest_ip);

  // bytes payload = 11;
  void clear_payload();
  static const int kPayloadFieldNumber = 11;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint64 timestamp_int = 2;
  void clear_timestamp_int();
  static const int kTimestampIntFieldNumber = 2;
  ::google::protobuf::uint64 timestamp_int() const;
  void set_timestamp_int(::google::protobuf::uint64 value);

  // uint32 src_port = 5;
  void clear_src_port();
  static const int kSrcPortFieldNumber = 5;
  ::google::protobuf::uint32 src_port() const;
  void set_src_port(::google::protobuf::uint32 value);

  // uint32 dest_port = 6;
  void clear_dest_port();
  static const int kDestPortFieldNumber = 6;
  ::google::protobuf::uint32 dest_port() const;
  void set_dest_port(::google::protobuf::uint32 value);

  // uint32 seq = 7;
  void clear_seq();
  static const int kSeqFieldNumber = 7;
  ::google::protobuf::uint32 seq() const;
  void set_seq(::google::protobuf::uint32 value);

  // uint32 ack_seq = 8;
  void clear_ack_seq();
  static const int kAckSeqFieldNumber = 8;
  ::google::protobuf::uint32 ack_seq() const;
  void set_ack_seq(::google::protobuf::uint32 value);

  // uint32 payload_size = 9;
  void clear_payload_size();
  static const int kPayloadSizeFieldNumber = 9;
  ::google::protobuf::uint32 payload_size() const;
  void set_payload_size(::google::protobuf::uint32 value);

  // bool is_query = 10;
  void clear_is_query();
  static const int kIsQueryFieldNumber = 10;
  bool is_query() const;
  void set_is_query(bool value);

  // @@protoc_insertion_point(class_scope:packet.PackPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr timestamp_;
  ::google::protobuf::internal::ArenaStringPtr src_ip_;
  ::google::protobuf::internal::ArenaStringPtr dest_ip_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint64 timestamp_int_;
  ::google::protobuf::uint32 src_port_;
  ::google::protobuf::uint32 dest_port_;
  ::google::protobuf::uint32 seq_;
  ::google::protobuf::uint32 ack_seq_;
  ::google::protobuf::uint32 payload_size_;
  bool is_query_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_packet_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PackPacket

// string timestamp = 1;
inline void PackPacket::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackPacket::timestamp() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.timestamp)
  return timestamp_.GetNoArena();
}
inline void PackPacket::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.PackPacket.timestamp)
}
#if LANG_CXX11
inline void PackPacket::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.PackPacket.timestamp)
}
#endif
inline void PackPacket::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.PackPacket.timestamp)
}
inline void PackPacket::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.PackPacket.timestamp)
}
inline ::std::string* PackPacket::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:packet.PackPacket.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackPacket::release_timestamp() {
  // @@protoc_insertion_point(field_release:packet.PackPacket.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackPacket::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:packet.PackPacket.timestamp)
}

// uint64 timestamp_int = 2;
inline void PackPacket::clear_timestamp_int() {
  timestamp_int_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PackPacket::timestamp_int() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.timestamp_int)
  return timestamp_int_;
}
inline void PackPacket::set_timestamp_int(::google::protobuf::uint64 value) {
  
  timestamp_int_ = value;
  // @@protoc_insertion_point(field_set:packet.PackPacket.timestamp_int)
}

// string src_ip = 3;
inline void PackPacket::clear_src_ip() {
  src_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackPacket::src_ip() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.src_ip)
  return src_ip_.GetNoArena();
}
inline void PackPacket::set_src_ip(const ::std::string& value) {
  
  src_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.PackPacket.src_ip)
}
#if LANG_CXX11
inline void PackPacket::set_src_ip(::std::string&& value) {
  
  src_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.PackPacket.src_ip)
}
#endif
inline void PackPacket::set_src_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.PackPacket.src_ip)
}
inline void PackPacket::set_src_ip(const char* value, size_t size) {
  
  src_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.PackPacket.src_ip)
}
inline ::std::string* PackPacket::mutable_src_ip() {
  
  // @@protoc_insertion_point(field_mutable:packet.PackPacket.src_ip)
  return src_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackPacket::release_src_ip() {
  // @@protoc_insertion_point(field_release:packet.PackPacket.src_ip)
  
  return src_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackPacket::set_allocated_src_ip(::std::string* src_ip) {
  if (src_ip != NULL) {
    
  } else {
    
  }
  src_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_ip);
  // @@protoc_insertion_point(field_set_allocated:packet.PackPacket.src_ip)
}

// string dest_ip = 4;
inline void PackPacket::clear_dest_ip() {
  dest_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackPacket::dest_ip() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.dest_ip)
  return dest_ip_.GetNoArena();
}
inline void PackPacket::set_dest_ip(const ::std::string& value) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.PackPacket.dest_ip)
}
#if LANG_CXX11
inline void PackPacket::set_dest_ip(::std::string&& value) {
  
  dest_ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.PackPacket.dest_ip)
}
#endif
inline void PackPacket::set_dest_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.PackPacket.dest_ip)
}
inline void PackPacket::set_dest_ip(const char* value, size_t size) {
  
  dest_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.PackPacket.dest_ip)
}
inline ::std::string* PackPacket::mutable_dest_ip() {
  
  // @@protoc_insertion_point(field_mutable:packet.PackPacket.dest_ip)
  return dest_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackPacket::release_dest_ip() {
  // @@protoc_insertion_point(field_release:packet.PackPacket.dest_ip)
  
  return dest_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackPacket::set_allocated_dest_ip(::std::string* dest_ip) {
  if (dest_ip != NULL) {
    
  } else {
    
  }
  dest_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest_ip);
  // @@protoc_insertion_point(field_set_allocated:packet.PackPacket.dest_ip)
}

// uint32 src_port = 5;
inline void PackPacket::clear_src_port() {
  src_port_ = 0u;
}
inline ::google::protobuf::uint32 PackPacket::src_port() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.src_port)
  return src_port_;
}
inline void PackPacket::set_src_port(::google::protobuf::uint32 value) {
  
  src_port_ = value;
  // @@protoc_insertion_point(field_set:packet.PackPacket.src_port)
}

// uint32 dest_port = 6;
inline void PackPacket::clear_dest_port() {
  dest_port_ = 0u;
}
inline ::google::protobuf::uint32 PackPacket::dest_port() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.dest_port)
  return dest_port_;
}
inline void PackPacket::set_dest_port(::google::protobuf::uint32 value) {
  
  dest_port_ = value;
  // @@protoc_insertion_point(field_set:packet.PackPacket.dest_port)
}

// uint32 seq = 7;
inline void PackPacket::clear_seq() {
  seq_ = 0u;
}
inline ::google::protobuf::uint32 PackPacket::seq() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.seq)
  return seq_;
}
inline void PackPacket::set_seq(::google::protobuf::uint32 value) {
  
  seq_ = value;
  // @@protoc_insertion_point(field_set:packet.PackPacket.seq)
}

// uint32 ack_seq = 8;
inline void PackPacket::clear_ack_seq() {
  ack_seq_ = 0u;
}
inline ::google::protobuf::uint32 PackPacket::ack_seq() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.ack_seq)
  return ack_seq_;
}
inline void PackPacket::set_ack_seq(::google::protobuf::uint32 value) {
  
  ack_seq_ = value;
  // @@protoc_insertion_point(field_set:packet.PackPacket.ack_seq)
}

// uint32 payload_size = 9;
inline void PackPacket::clear_payload_size() {
  payload_size_ = 0u;
}
inline ::google::protobuf::uint32 PackPacket::payload_size() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.payload_size)
  return payload_size_;
}
inline void PackPacket::set_payload_size(::google::protobuf::uint32 value) {
  
  payload_size_ = value;
  // @@protoc_insertion_point(field_set:packet.PackPacket.payload_size)
}

// bool is_query = 10;
inline void PackPacket::clear_is_query() {
  is_query_ = false;
}
inline bool PackPacket::is_query() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.is_query)
  return is_query_;
}
inline void PackPacket::set_is_query(bool value) {
  
  is_query_ = value;
  // @@protoc_insertion_point(field_set:packet.PackPacket.is_query)
}

// bytes payload = 11;
inline void PackPacket::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PackPacket::payload() const {
  // @@protoc_insertion_point(field_get:packet.PackPacket.payload)
  return payload_.GetNoArena();
}
inline void PackPacket::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:packet.PackPacket.payload)
}
#if LANG_CXX11
inline void PackPacket::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packet.PackPacket.payload)
}
#endif
inline void PackPacket::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packet.PackPacket.payload)
}
inline void PackPacket::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packet.PackPacket.payload)
}
inline ::std::string* PackPacket::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:packet.PackPacket.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PackPacket::release_payload() {
  // @@protoc_insertion_point(field_release:packet.PackPacket.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PackPacket::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:packet.PackPacket.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace packet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_packet_2eproto
